* What is spring-boot-bugger?

Note: Not intended for production, but simplifies paving the way for you to pitch Clojure to your app/organization.

Ever wished to introduce Clojure into your enterprisey SpringBoot app (organization?) but didn't want to
1. Add noise to your /build.gradle/ for injecting Clojure
2. Want to start very small - just a simple NREPL into your SpringBoot app - and then use REPL-power to inspect and dynamically add functionality using Clojure

Then, /spring-boot-bugger/ simplifies it for you!

* Steps for Gradle
(Modify accordingly for maven)

** Preferred (Clever, but not battle-tested)

Following these steps allow you to enable /NREPL/ by modifying two files in your repository
- build.gradle
- .gitignore
The changes are pretty much inconsequential to your core project codebase and should be easy to push through with possibly non-existent pushback.

These steps are suggestive and you can tweak - especially the names of files

*** Add the following to your /.gitignore/
#+begin_example
/dev.gradle
/**/DevWorx.java
#+end_example

*** Create /dev.gradle/
(Or whatever name you'd like - match it with the entry in /.gitignore/)
#+begin_src gradle
repositories {
     maven { url "https://clojars.org/repo" }
}

dependencies {
    developmentOnly 'org.msync:spring-boot-bugger:0.1.1-SNAPSHOT'
}
#+end_src

*** Update /build.gradle/
Add the following to your /build.gradle/ - this allows you to tweak your build-script via an optionally present file.
#+begin_src gradle
if ((new File("dev.gradle")).isFile()) {
    apply from: 'dev.gradle'
}
#+end_src

*** Add a Java file to your codebase
Name this file /DevWorx.java/ (to match your .gitignore entry), and keep it at an appropriate place - your base package
Assuming your base package is /com.company.my_application/, the file should be created at *src/main/java/com/company/my_application/DevWorx.java*, unless you are not using standard Java+Gradle locations.
#+begin_src java
package com.company.my_application;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.stereotype.Component;

@Component
@ComponentScan("org.msync.spring_boot_bugger") // This is where spring-boot-bugger Component-s live
public class DevWorx {
}
#+end_src

** Detailed Steps
Dumb steps that require more verbose modifications to your build.gradle
*** Add dependency
Currently, available in the /clojars/ repsitory. So, add it to repositories as well

#+begin_src gradle
repositories {
  // Your other repositories
  maven { url "https://clojars.org/repo"}
}
#+end_src

#+begin_src gradle
developmentOnly 'org.msync:spring-boot-bugger:0.1.1-SNAPSHOT'
#+end_src

*** Add /ComponentScan/
See addition of /DevWorx.java/ steps above

* Optional - Set the NREPL port
By default, port 7888 is used. But add /nrepl.port/ to your application.properties (or equivalent) file as follows

#+begin_src properties
# ...
nrepl.port = 8190
# ...
#+end_src

* Run "bootRun"
#+begin_src bash
./gradlew bootRun
#+end_src

And you should see something like the following
#+BEGIN_QUOTE
...
2020-12-23 17:52:11.724  INFO 51843 --- [  restartedMain] o.msync.spring_boot_bugger.NreplService  : ******** NREPL server started on port 8190
...
#+END_QUOTE

* Connect to the NREPL
And hack away to glory!

For your convenience, there's a namespace you can switch to and get hold of the /ApplicationContext/ object via the /state/ atom's /:ctx/ key.

#+begin_src clojure
user> @org.msync.spring-boot-bugger/state
;; => {:ctx #object[org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext 0x60435032 "org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@60435032, started on Wed Dec 23 18:03:16 IST 2020"]}
user> (ns org.msync.spring-boot-bugger)
;; => nil
org.msync.spring-boot-bugger> @state
;; => {:ctx #object[org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext 0x60435032 "org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@60435032, started on Wed Dec 23 18:03:16 IST 2020"]}
org.msync.spring-boot-bugger>
#+end_src

* Control the NREPL service via an end-point

Pretty crude controls, and hopefully these path-prefixes should not clash with any existing registered path-mappings. Else, you are out of luck - get the source-code and modify the Java therein!

*** Start it
#+begin_src bash
curl http://host:port/internal-dev/clojure/nrepl-start
#+end_src

*** Stop it
#+begin_src bash
curl http://host:port/internal-dev/clojure/nrepl-stop
#+end_src

* Caveats
This is intended (currently) as a purely development-aiding dependency. It's tied to SpringBoot, but can be easily modified for other frameworks like Quarkus.

Unroll the source into your application's source if you manage to convince your team/organization with a show of Clojure power and then add Clojure code for real! You can thank me later! ;-)

* License

Copyright Â© 2020 - Ravindra R. Jaju

This program and the accompanying materials are made available under the
terms of the Eclipse Public License 2.0 which is available at
[[http://www.eclipse.org/legal/epl-2.0][http://www.eclipse.org/legal/epl-2.0]].

This Source Code may also be made available under the following Secondary
Licenses when the conditions for such availability set forth in the Eclipse
Public License, v. 2.0 are satisfied: GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or (at your
option) any later version, with the GNU Classpath Exception which is available
at [[https://www.gnu.org/software/classpath/license.html][https://www.gnu.org/software/classpath/license.html]].
